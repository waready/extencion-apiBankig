{"version":3,"file":"extension.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,uGCpBA,eA0IA,oBAAyBQ,GAIxBC,QAAQC,IAAI,+DAKZ,IAAIC,EAAaC,EAAOC,SAASC,gBAAgB,qBAAqB,KAGrEF,EAAOG,OAAOC,uBAAuB,yCA3CvCC,iBACI,MAAMC,EAASN,EAAOG,OAAOI,iBAE7B,GAAID,EAAQ,CACR,MAAME,EAAWF,EAAOE,SAClBC,EAAOD,EAASE,UAGhBC,EAAU,kCAEhB,IAAIC,EAAUH,EAAKI,QAAQF,GAAS,CAACG,EAAQC,EAAMC,IAGxC,oCAFOD,EAAKE,iBACO,QAATF,EAAiB,UAAY,cAC0BA,MAASC,4CASrF,GALAJ,EAAUA,EAAQC,QAAQ,gCAAiC,KAG3DD,EAAUA,EAAQC,QAAQ,iCAAkC,KAExDD,IAAYH,EAAM,CAClB,MAAMS,EAAO,IAAIlB,EAAOmB,cACxBD,EAAKL,QAAQL,EAASY,IAAK,IAAIpB,EAAOqB,MAAM,EAAG,EAAGb,EAASc,UAAW,GAAIV,SACpEZ,EAAOuB,UAAUC,UAAUN,E,EAG7C,CAgBEO,EAAkB,IAGnB7B,EAAQ8B,cAAcC,KAAK5B,EAC5B,EAGA,wBAA8B,C","sources":["webpack://apibanking/external commonjs \"vscode\"","webpack://apibanking/webpack/bootstrap","webpack://apibanking/./src/extension.ts"],"sourcesContent":["module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\n// async function formatCodeBlocks() {\n//     const editor = vscode.window.activeTextEditor;\n\n//     if (editor) {\n//         const document = editor.document;\n//         const text = document.getText();\n\n//         // Patrón de bloque de código XML o JSON en Markdown\n//         const pattern = /```(xml|json)\\n([\\s\\S]*?)\\n```/g;\n\n//         const newText = text.replace(pattern, (_match, lang, code) => {\n//             return `<code-group>\\n<code-block title=\"${lang.toUpperCase()}\" active>\\n\\`\\`\\`${lang}\\n${code}\\n\\`\\`\\`\\n</code-block>\\n</code-group>`;\n//         });\n\n//         if (newText !== text) {\n//             const edit = new vscode.WorkspaceEdit();\n//             edit.replace(document.uri, new vscode.Range(0, 0, document.lineCount, 0), newText);\n//             await vscode.workspace.applyEdit(edit);\n//         }\n//     }\n// }\n// async function formatCodeBlocks() {\n//     const editor = vscode.window.activeTextEditor;\n\n//     if (editor) {\n//         const document = editor.document;\n//         const text = document.getText();\n\n//         // Patrón de bloque de código XML o JSON en Markdown\n//         const pattern = /```(xml|json)\\n([\\s\\S]*?)\\n```/g;\n\n//         const newText = text.replace(pattern, (_match, lang, code) => {\n//             const isActive = lang === 'xml' ? ' active' : '';\n//             return `<code-group>\\n<code-block title=\"${lang.toUpperCase()}\"${isActive}>\\n\\`\\`\\`${lang}\\n${code}\\n\\`\\`\\`\\n</code-block>\\n</code-group>`;\n//         });\n\n//         if (newText !== text) {\n//             const edit = new vscode.WorkspaceEdit();\n//             edit.replace(document.uri, new vscode.Range(0, 0, document.lineCount, 0), newText);\n//             await vscode.workspace.applyEdit(edit);\n//         }\n//     }\n//}\n\n// async function formatCodeBlocks() {\n//     const editor = vscode.window.activeTextEditor;\n\n//     if (editor) {\n//         const document = editor.document;\n//         const text = document.getText();\n\n//         // Patrón de bloque de código XML o JSON en Markdown\n//         const pattern = /```(xml|json)\\n([\\s\\S]*?)\\n```/g;\n\n//         let newText = text.replace(pattern, (_match, lang, code) => {\n//             const title = lang.toUpperCase();\n//             const isActive = lang === 'xml' ? ' active' : '';\n//             return `<code-group>\\n<code-block title=\"${title}\"${isActive}>\\n\\`\\`\\`${lang}\\n${code}\\n\\`\\`\\`\\n</code-block>`;\n//         });\n\n//         // Reemplazar el cierre de tags </code-group> con un único cierre\n//         newText = newText.replace(/<\\/code-block>\\n<\\/code-group>/g, '</code-block>\\n</code-group>');\n\n//         if (newText !== text) {\n//             const edit = new vscode.WorkspaceEdit();\n//             edit.replace(document.uri, new vscode.Range(0, 0, document.lineCount, 0), newText);\n//             await vscode.workspace.applyEdit(edit);\n//         }\n//     }\n// }\n\n\n\n// async function formatCodeBlocks() {\n//     const editor = vscode.window.activeTextEditor;\n\n//     if (editor) {\n//         const document = editor.document;\n//         const text = document.getText();\n\n//         // Patrón de bloque de código XML o JSON en Markdown\n//         const pattern = /```(xml|json)\\n([\\s\\S]*?)\\n```/g;\n\n//         let newText = text.replace(pattern, (_match, lang, code) => {\n//             const title = lang.toUpperCase();\n//             const isActive = lang === 'xml' ? ' active' : '';\n//             return `<code-group>\\n<code-block title=\"${title}\"${isActive}>\\n\\`\\`\\`${lang}\\n${code}\\n\\`\\`\\`\\n</code-block>\\n</code-group>`;\n//         });\n\n//          // Reemplazar secuencia \"</code-group>\\n<code-group>\" por un espacio\n//         newText = newText.replace(/<\\/code-group>\\n<code-group>/g, ' ');\n\n//         // Reemplazar cierre de tag </code-group> seguido de apertura <code-group> por un espacio\n//         newText = newText.replace(/<\\/code-group>\\s*<code-group>/g, ' ');\n         \n//         if (newText !== text) {\n//             const edit = new vscode.WorkspaceEdit();\n//             edit.replace(document.uri, new vscode.Range(0, 0, document.lineCount, 0), newText);\n//             await vscode.workspace.applyEdit(edit);\n//         }\n//     }\n// }\n\nasync function formatCodeBlocks() {\n    const editor = vscode.window.activeTextEditor;\n\n    if (editor) {\n        const document = editor.document;\n        const text = document.getText();\n\n        // Patrón de bloque de código XML o JSON en Markdown\n        const pattern = /```(xml|json)\\n([\\s\\S]*?)\\n```/g;\n\n        let newText = text.replace(pattern, (_match, lang, code) => {\n            const title = lang.toUpperCase();\n            const isActive = lang === 'xml' ? ' active' : '';\n            return `<code-group>\\n<code-block title=\"${title}\"${isActive}>\\n\\`\\`\\`${lang}\\n${code}\\n\\`\\`\\`\\n</code-block>\\n</code-group>`;\n        });\n\n        // Reemplazar secuencia \"</code-group>\\n<code-group>\" por un espacio\n        newText = newText.replace(/<\\/code-group>\\n<code-group>/g, ' ');\n\n        // Reemplazar cierre de tag </code-group> seguido de apertura <code-group> por un espacio\n        newText = newText.replace(/<\\/code-group>\\s*<code-group>/g, ' ');\n\n        if (newText !== text) {\n            const edit = new vscode.WorkspaceEdit();\n            edit.replace(document.uri, new vscode.Range(0, 0, document.lineCount, 0), newText);\n            await vscode.workspace.applyEdit(edit);\n        }\n    }\n}\n\n\nexport function activate(context: vscode.ExtensionContext) {\n\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\tconsole.log('Congratulations, your extension \"apibanking\" is now active!');\n\n\t// The command has been defined in the package.json file\n\t// Now provide the implementation of the command with registerCommand\n\t// The commandId parameter must match the command field in package.json\n\tlet disposable = vscode.commands.registerCommand('apibanking.format', () => {\n\t\t// The code you place here will be executed every time your command is executed\n\t\t// Display a message box to the user\n\t\tvscode.window.showInformationMessage('Format documente md by ApiBanking v1!');\n\t\tformatCodeBlocks();\n\t});\n\n\tcontext.subscriptions.push(disposable);\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","console","log","disposable","vscode","commands","registerCommand","window","showInformationMessage","async","editor","activeTextEditor","document","text","getText","pattern","newText","replace","_match","lang","code","toUpperCase","edit","WorkspaceEdit","uri","Range","lineCount","workspace","applyEdit","formatCodeBlocks","subscriptions","push"],"sourceRoot":""}